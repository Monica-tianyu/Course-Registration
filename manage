#include"data.h"
#include<iostream>
#include<string>

using namespace std;

//管理员管理课程（增加，删除，修改，查看）

//查看全部课程
void show_course()
{	
	
	FILE *fp = fopen("current_course.txt", "r");
	if (fp == NULL)
	{
		cout << "课程尚未录入，请先录入课程！" << endl;
		choice1();
	}
	vector<Course> course;
	Course c;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	course.push_back(c);
	//cout << course.size() << endl;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	while (!feof(fp))
	{
		course.push_back(c);
		fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);		
	}
	fclose(fp);
	//cout << course.size() << endl;
	cout.setf(ios::left);
	cout.width(10);
	cout << "课程编号";
	cout.width(20);
	cout << "课程名称";
	cout.width(10);
	cout << "授课老师";
	cout.width(10);
	cout << "容纳人数";
	cout.width(10);
	cout << "已选人数";
	cout.width(10);
	cout<<  "课程类型";
	cout.width(10);
	cout << "难易程度";
	cout.width(10);
	cout << "评分人数";
	cout.width(10);
	cout << "平均评分" << endl;
	for (unsigned i = 0; i < course.size(); ++i)
	{
		cout.width(10);
		cout << course[i].course_number ;
		cout.width(20);
		cout << course[i].course_name ;
		cout.width(10);
		cout << course[i].teacher ;
		cout.width(10);
		cout << course[i].capacity ;
		cout.width(10);
		cout << course[i].current_number ;
		cout.width(10);
		cout << course[i].type ;
		cout.width(10);
		cout << course[i].difficulty;
		cout.width(10);
		cout << course[i].count;
		cout.width(10);
		cout << course[i].score<< endl;

	}
	choice1();
}

//增加课程
void add_course()
{
	FILE *fp = fopen("current_course.txt", "r+");
	if (fp == NULL)
	{
		cout << "课程尚未录入，请先录入课程！" << endl;
		choice1();
	}
	vector<Course> course;
	Course c;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	course.push_back(c);
	while (!feof(fp))
	{

		fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
		course.push_back(c);
	}
	fclose(fp);
    //读取文件后，在末尾加上输入的课程
	int num = course.size();
	string s1,s2,s3;
	int n1, n2;
	bool flag;
	cout << "输入课程具体信息（以逗号分隔）：" ;
	cin.ignore();
	getline(cin, s1, ',');
	getline(cin, s2, ',');
	scanf("%d,%d,", &n1, &n2);
	cin >> s3;
	//判断增加课程是否已存在
	flag = true;
	for (unsigned i = 0; i < course.size(); ++i)
	{
		if (compare(s1.c_str(), course[i].course_name) == 1)
		{
			flag = false;
			cout << "该课程已存在！" << endl;
			break;
		}
	}
	if (flag == false)
	{
		choice1();
	}
	if (flag == true)
	{
		//修改相应助教文件
		fp = fopen("assistant.txt", "a+");
		if (fp == NULL)
		{
			cout << "打开失败！" << endl;
			exit(-1);
		}
		char n[10];
		strcpy(n, number(course[num - 1].course_number, 1));
		fprintf(fp, "%s\t%s\n", n, "NULL");
		fclose(fp);

		//修改课程文件
		fp = fopen("current_course.txt", "a+");
		if (fp == NULL)
		{
			cout << "打开失败！" << endl;
			exit(-1);
		}
		//cout << s1 << endl;
		//printf("%10s", s1.c_str());
		//cout << number(course[num - 1].course_number, 1) << endl;
		//printf("%10s\t%10s\t%10s\t%10d\t%10d\t%10s\n", number(course[num - 1].course_number, 1), s1.c_str(), s2.c_str(), n1, n2, s3.c_str());
		fprintf(fp, "%10s\t%10s\t%10s\t%10d\t%10d\t%10s%10s%10d%10f\n", n, s1.c_str(), s2.c_str(), n1, n2, s3.c_str(),"NULL",0,0.0);
		fclose(fp);
		cout << "添加成功！" << endl;
		show_course();
		choice1();
	}
}

//删除课程
void delete_course()
{
	
	FILE *fp = fopen("current_course.txt", "r+");
	if (fp == NULL)
	{
		cout << "课程尚未录入，请先录入课程！" << endl;
		choice1();
	}
	vector<Course> course;
	Course c;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);	
	while (!feof(fp))
	{
		course.push_back(c);
		fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	}
	fclose(fp);

	cout << "输入课程编号：";
	char ch[10];
	cin >> ch;
	
	bool flag = false;
	unsigned i = 0;
	for ( ; i < course.size(); ++i)
	{
		if (compare(ch, course[i].course_number) == 1)
		{
			flag = true;
			break;
		}
	}
	if (flag == false)
	{
		cout << "该课程不存在!" << endl;
		choice1();
	}
	if (flag == true)
	{
		if (course[i].current_number == 0)
		{
			course.erase(course.begin() + i);

			//cout << course.size() << endl;
			
			fp = fopen("assistant.txt", "r+");
			if (fp == NULL)
			{
				cout << "打开失败！" << endl;
				exit(-1);
			}
			vector<Assistant> ass;
			Assistant a;
			fscanf(fp, "%s%s", &a.course_number, &a.assistant);
			while (!feof(fp))
			{
				ass.push_back(a);
				fscanf(fp, "%s%s", &a.course_number, &a.assistant);
			}
			fclose(fp);

			ass.erase(ass.begin() + i);

			fp = fopen("assistant.txt", "w");
			if (fp == NULL)
			{
				cout << "打开失败！" << endl;
				exit(-1);
			}
			unsigned t = 0;
			for (; t < course.size(); ++t)
			{
				fprintf(fp, "%s\t%s\n", course[t].course_number, ass[t].assistant);
			}
			fclose(fp);
			
			fp = fopen("current_course.txt", "w");
			if (fp == NULL)
			{
				cout << "打开失败！" << endl;
				exit(-1);
			}
			
			for (t=0; t < course.size(); ++t)
			{
				fprintf(fp, "%10s\t%10s\t%10s\t%10d\t%10d\t%10s%10s%10d%10f\n", course[t].course_number, course[t].course_name, course[t].teacher, course[t].capacity, course[t].current_number, course[t].type,course[t].difficulty,course[t].count,course[t].score);
			}
			fclose(fp);
			cout << "删除成功！" << endl;
			show_course();
			choice1();
		}
		if (course[i].current_number != 0)
		{
			cout << "该课程已有学生选择，无法删除！" << endl;
			choice1();
		}
	}
}

//修改课程
void change_course()
{
	//读取数据
	FILE *fp = fopen("current_course.txt", "r+");
	if (fp == NULL)
	{
		cout << "课程尚未录入，请先录入课程！" << endl;
		choice1();
	}
	vector<Course> course;
	Course c;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	while (!feof(fp))
	{
		course.push_back(c);
		fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	}
	fclose(fp);

	cout << "需要修改的课程ID：";
	char ch[10];
	cin >> ch;
	//检验是否存在
	bool flag = false;
	unsigned i = 0;
	for (; i < course.size(); ++i)
	{
		if (compare(ch, course[i].course_number) == 1)
		{
			flag = true;
			break;
		}
	}
	if (flag == false)
	{
		cout << "该课程不存在!" << endl;
		choice1();
	}
	if (flag == true)
	{
		cout << "需要修改的具体字段（1.任课老师 2.容纳人数）：";
		int a;
		cin >> a;
		cout << "具体修改为：";
		//修改任课老师
		if (a == 1)
		{
			cin >> course[i].teacher;

			fp = fopen("current_course.txt", "w");
			if (fp == NULL)
			{
				cout << "打开失败！" << endl;
				exit(-1);
			}
			unsigned t = 0;
			for (; t < course.size(); ++t)
			{
				fprintf(fp, "%10s\t%10s\t%10s\t%10d\t%10d\t%10s%10s%10d%10f\n", course[t].course_number, course[t].course_name, course[t].teacher, course[t].capacity, course[t].current_number, course[t].type,course[t].difficulty,course[t].count,course[t].score);
			}
			fclose(fp);
			cout << "修改成功！" << endl;
			show_course();
			choice1();
		}
		//修改容纳人数
		if (a == 2)
		{
			cin >> course[i].capacity;
			//检验修改数据是否合理
			if(course[i].capacity<course[i].current_number)
			{
				cout << "该人数少于已选人数，修改失败！" << endl;
				choice1();
			}
			else
			{
				fp = fopen("current_course.txt", "w");
				if (fp == NULL)
				{
					cout << "打开失败！" << endl;
					exit(-1);
				}
				unsigned t = 0;
				for (; t < course.size(); ++t)
				{
					fprintf(fp, "%10s\t%10s\t%10s\t%10d\t%10d\t%10s%10s%10d%10f\n", course[t].course_number, course[t].course_name, course[t].teacher, course[t].capacity, course[t].current_number, course[t].type,course[t].difficulty,course[t].count,course[t].score);
				}
				fclose(fp);
				cout << "修改成功！" << endl;
				show_course();
				choice1();
			}
		}
	}
}

//查看具体课程
void specific()
{
	//读取数据
	FILE *fp = fopen("current_course.txt", "r+");
	if (fp == NULL)
	{
		cout << "课程尚未录入，请先录入课程！" << endl;
		choice1();
	}
	vector<Course> course;
	Course c;
	fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	while (!feof(fp))
	{
		course.push_back(c);
		fscanf(fp, "%s%s%s%d%d%s%s%d%f", &c.course_number, &c.course_name, &c.teacher, &c.capacity, &c.current_number, &c.type,&c.difficulty,&c.count,&c.score);
	}
	//fclose(fp);

	cout << "输入需要查看的课程ID：";
	char ch[10];
	cin >> ch;
	//检验该课程是否存在
	bool flag = false;
	unsigned i = 0;
	for (; i < course.size(); ++i)
	{
		if (compare(ch, course[i].course_number) == 1)
		{
			flag = true;
			break;
		}
	}
	if (flag == false)
	{
		cout << "该课程不存在!" << endl;
		fclose(fp);
		choice1();
	}
	if (flag == true)
	{
		cout << "=============================================================================================" << endl;
		cout.setf(ios::left);
		cout.width(10);
		cout << course[i].course_number;
		cout.width(20);
		cout << course[i].course_name;
		cout.width(10);
		cout << course[i].teacher;
		cout.width(10);
		cout << course[i].capacity;
		cout.width(10);
		cout << course[i].current_number;
		cout.width(10);
		cout << course[i].type;
		cout.width(10);
		cout << course[i].difficulty;
		cout.width(10);
		cout << course[i].count;
		cout.width(10);
		cout << course[i].score << endl;
		cout << "=============================================================================================" << endl;
		fclose(fp);
		cout << "还希望进行以下哪项操作：1.查看选课学生名单 2.查看助教名单" << endl;
		cout << "输入操作编号：";
		int b;
		cin >> b;
		if (b == 1)
		{
			int student_num = 0;
			fp = fopen("student.txt", "r");
			if (fp == NULL)
			{
				cout << "该课程目前没有学生选择！" << endl;
				choice1();
				return;
			}
			vector<Student> stu;
			char temp[50];
			fscanf(fp, "%s", temp);
			while (!feof(fp))
			{
				char *p;
				Student s;
				p = strtok(temp, ",");
				s.student_ID = (char*)malloc(sizeof(temp));
				strcpy(s.student_ID, p);
				p = strtok(NULL, ",");
				s.key = (char *)malloc(sizeof(temp));
				strcpy(s.key, p);
				stu.push_back(s);
				fscanf(fp, "%s", temp);
			}
			fclose(fp);
			for (unsigned q = 0; q < stu.size(); ++q)
			{
				char nch[20];
				strcpy(nch, stu[q].student_ID);
				strcat(nch, ".txt");
				fp = fopen(nch, "r");
				if (fp == NULL)
				{
					cout << "打开失败！" << endl;
					exit(-1);
				}
				vector<PersonalCourse> personalcourse;
				PersonalCourse p;
				fscanf(fp, "%s%s", &p.course_number, &p.assistant);
				while (!feof(fp))
				{
					personalcourse.push_back(p);
					fscanf(fp, "%s%s", &p.course_number, &p.assistant);
				}
				fclose(fp);
				for (unsigned w = 0; w < personalcourse.size(); ++w)
				{
					if (compare(personalcourse[w].course_number, course[i].course_number) == 1)
					{
						cout << stu[q].student_ID << " ";
						++student_num;
						break;
					}
				}
			}
			cout << endl;
			cout << "共计" << student_num << "名学生，距离满课还差" << course[i].capacity - student_num << "人！" << endl;
			choice1();
		}
		if (b == 2)
		{

			//读取助教文件信息
			fp = fopen("assistant.txt", "r");
			if (fp == NULL)
			{
				cout << "该课程目前没有助教！" << endl;
				choice1();
				return;
			}
			vector<Assistant> ass;
			Assistant a;
			fscanf(fp, "%s%s", &a.course_number, &a.assistant);
			while (!feof(fp))
			{
				ass.push_back(a);
				fscanf(fp, "%s%s", &a.course_number, &a.assistant);
			}
			fclose(fp);

			if (ass[i].assistant[0] == 'N')
			{
				cout << "该课程目前没有助教！" << endl;
				choice1();
				return;
			}
			else 
			{
				cout << "该课程助教名单为：";
				cout << ass[i].assistant << endl;
				choice1();
			}

		}
	}
}

//ID编号加n
char * number(char num[], int n)
{
	int k = (num[1] - '0') * 10 + num[2] - '0';
	num[1] = (k + n) / 10 + '0';
	num[2] = (k + n) % 10 + '0';
	return num;
}

//软件,张亮,10,0,专业课
